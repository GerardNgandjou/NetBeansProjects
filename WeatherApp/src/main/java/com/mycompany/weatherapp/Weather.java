/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.weatherapp;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.swing.JOptionPane;
import org.json.JSONObject;


/**
 *
 * @author reli
 */
public class Weather extends javax.swing.JFrame {

    /**
     * Creates new form Weather
     */
    public Weather() {
        initComponents();
    }
    //declaration of constante
    // API Configuration (MUST REPLACE "YOUR_API_KEY" with actual key from openweathermap.org)
    private final String API_URL = "https://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s&units=metric";
    private final String API_KEY = "656ab14b2b5ed338e9b6d2a2d650910b";
    // API endpoint with placeholders for:
    // %s = city name
    // %s = API key
    // units=metric for Celsius temperatures
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        weatherCity = new javax.swing.JTextField();
        weatherSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        weatherResult = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Weather App");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jLabel1.setText("Enter your city : ");

        weatherCity.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        weatherCity.setPreferredSize(new java.awt.Dimension(88, 25));
        weatherCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weatherCityActionPerformed(evt);
            }
        });

        weatherSearch.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        weatherSearch.setText("Validate");
        weatherSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weatherSearchActionPerformed(evt);
            }
        });
        weatherSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                weatherSearchKeyPressed(evt);
            }
        });

        weatherResult.setColumns(20);
        weatherResult.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        weatherResult.setRows(5);
        jScrollPane1.setViewportView(weatherResult);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(94, 94, 94))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(weatherCity, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(weatherSearch)
                        .addContainerGap(9, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(weatherSearch)
                    .addComponent(weatherCity, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void weatherCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weatherCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weatherCityActionPerformed

    private void weatherSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weatherSearchKeyPressed
        // TODO add your handling code here:
        
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Trigger the same action as the search button would
//            weatherSearch.doClick();  // Programmatically "click" the search button

//             Alternative: Call the weather fetch method directly
//             fetchWeather(new ActionEvent(weatherSearch, ActionEvent.ACTION_PERFORMED, ""));
//            
//             You might also want to consume the event to prevent any default behavior
//             evt.consume();

//             And consider adding a small visual feedback:
//            weatherSearch.setPressed(true);
//            weatherSearch.setPressed(false);

            String city = weatherCity.getText().trim();
            try {
                //
                String weatherData = getWeatherData(city);    //Call method to get weather data information from API
                displayWeatherData(weatherData);    //Call method to display the weather data
            } catch (Exception e) {
                // Show errors in TextArea
                weatherResult.setText("Error fetching weather data: " + e.getMessage());
            }
            
        }
        
    }//GEN-LAST:event_weatherSearchKeyPressed

    private void weatherSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weatherSearchActionPerformed
        // TODO add your handling code here:
        
        //Recieve the value of the TextField
        // Get and clean input
        String city = weatherCity.getText().trim();
        
        //Check if the textFied isn't empty
        // Validate input
        if (city.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                    "Please enter the city name", // Message
                    "Error", // Title
                    JOptionPane.ERROR_MESSAGE); // Icon type
            return;
        }
        
        try {
            //
            String weatherData = getWeatherData(city);    //Call method to get weather data information from API
            displayWeatherData(weatherData);    //Call method to display the weather data
        } catch (Exception e) {
            // Show errors in TextArea
            weatherResult.setText("Error fetching weather data: " + e.getMessage());
        }
        
    }//GEN-LAST:event_weatherSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    //Methods Implementation
    private String getWeatherData(String city) throws Exception {  // Fetches weather data from OpenWeatherMap API
        // Format URL with city and API key
        String urlString = String.format(API_URL, city, API_KEY);
        
        // Create URL object
        URL url = new URL(urlString);
        // Open HTTP connection
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");   // Set as GET request
        
        // Read reponse
        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String inputLine;
        StringBuilder content = new StringBuilder();
        
        // Read all lines from response
        while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
        }
        
        // Clean up resources
        in.close();
        conn.disconnect();
        
        return content.toString(); // Return raw JSON data
        
    }
    
    private void displayWeatherData(String jsonData) {
        try {
            // Parse JSON response
            JSONObject obj = new JSONObject(jsonData);
            JSONObject main = obj.getJSONObject("main"); // Main weather data
            JSONObject weather = obj.getJSONArray("weather").getJSONObject(0); // First weather entry
            
            // Format output string
            String weatherText = String.format(
                "Weather in %s:\n\n" + // City name
                "Temperature: %.1f°C\n" + // Current temp
                "Feels like: %.1f°C\n" + // Perceived temp
                "Humidity: %d%%\n" + // Humidity percentage
                "Conditions: %s\n" + // Weather description
                "Wind Speed: %.1f m/s", // Wind speed
                obj.getString("name"), // City name from JSON
                main.getDouble("temp"), // Temperature
                main.getDouble("feels_like"), // Feels-like temp
                main.getInt("humidity"), // Humidity
                weather.getString("description"), // Weather condition
                obj.getJSONObject("wind").getDouble("speed") // Wind speed
            );
            
            // Display formatted text
            weatherResult.setText(weatherText);
        } catch (Exception e) {
            weatherResult.setText("Error parsing weather data");
        }  
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Weather.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Weather.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Weather.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Weather.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Weather().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField weatherCity;
    private javax.swing.JTextArea weatherResult;
    private javax.swing.JButton weatherSearch;
    // End of variables declaration//GEN-END:variables
}
