/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ystemmanagementstudent;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author reli
 */
public class Teacher extends javax.swing.JFrame {

    /**
     * Creates new form Teacher
     */
    public Teacher() {
        initComponents();
    }
    
     private static final Logger logger = Logger.getLogger(Teacher.class.getName());

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Matri = new javax.swing.JTextField();
        Nam = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Grad = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Sala = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Add = new javax.swing.JButton();
        Remove = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(401, 301));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Linux Biolinum O", 0, 24)); // NOI18N
        jLabel1.setText("Teacher");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(130, 6, 100, 28);

        jLabel2.setText("Matricule");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(40, 50, 58, 18);

        Matri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MatriActionPerformed(evt);
            }
        });
        getContentPane().add(Matri);
        Matri.setBounds(140, 50, 180, 24);
        getContentPane().add(Nam);
        Nam.setBounds(140, 90, 180, 24);

        jLabel3.setText("Name");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(40, 90, 39, 18);
        getContentPane().add(Grad);
        Grad.setBounds(140, 130, 180, 24);

        jLabel4.setText("Salary");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(40, 170, 41, 18);
        getContentPane().add(Sala);
        Sala.setBounds(140, 170, 181, 24);

        jLabel5.setText("Grade");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(40, 130, 40, 18);

        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        getContentPane().add(Add);
        Add.setBounds(20, 220, 72, 24);

        Remove.setText("Remove");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });
        getContentPane().add(Remove);
        Remove.setBounds(110, 220, 85, 24);

        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        getContentPane().add(Update);
        Update.setBounds(230, 220, 80, 24);

        jButton1.setBackground(new java.awt.Color(255, 0, 51));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("X");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(340, 220, 50, 24);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MatriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MatriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MatriActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
        
        // Details of database connection
        String url = "jdbc:mysql://localhost/studentmanagement";
        String user = "root";
        String pwd = "root";
        
        

        // SQL query to add one tuple in the table
        String sql = "UPDATE Teacher "
                   + "SET Name = ?, grade = ?, Salary = ? "
                   + "WHERE matricule = ?";

        try (
            // Establish the connection to the database
            Connection con = DriverManager.getConnection(url, user, pwd);

            // Create the PreparedStatement
            PreparedStatement ps = con.prepareStatement(sql);
        ) {
            // Load the MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Take the input values
            
            String name = Nam.getText(); // Assuming 'Nam' is a JTextField for the name
            String grade = Grad.getText(); // Assuming 'Grad' is a JTextField for the grade
            double salary = Double.parseDouble(Sala.getText()); // Assuming 'Sala' is a JTextField for the salary
            String matricule = Matri.getText();

            // Set the parameters in the PreparedStatement
            ps.setString(1, name);
            ps.setString(2, grade);
            ps.setDouble(3, salary);
            ps.setString(4, matricule);

            // Execute the query
            int rowsInserted = ps.executeUpdate();

            // Show the success message
             // Show success message
            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(this, "Update successful!");
            } else if (name.isEmpty() && grade.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No records updated. Please check the input or the student ID.", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No records updated. Please check the student ID.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "MySQL JDBC driver not found: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid salary format. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_UpdateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:
       // Details of database connection
        String url = "jdbc:mysql://localhost/studentmanagement";
        String user = "root";
        String pwd = "root";
        
        

        // SQL query to add one tuple in the table
        String sql = "INSERT INTO Teacher(Name, grade, Salary) "
                   + "VALUES (?, ?, ?)";

        try (
            // Establish the connection to the database
            Connection con = DriverManager.getConnection(url, user, pwd);

            // Create the PreparedStatement
            PreparedStatement ps = con.prepareStatement(sql);
        ) {
            // Load the MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Take the input values
            String name = Nam.getText(); // Assuming 'Nam' is a JTextField for the name
            String grade = Grad.getText(); // Assuming 'Grad' is a JTextField for the grade
            double salary = Double.parseDouble(Sala.getText()); // Assuming 'Sala' is a JTextField for the salary

            // Set the parameters in the PreparedStatement
            ps.setString(1, name);
            ps.setString(2, grade);
            ps.setDouble(3, salary);

            // Execute the query
            int rowsInserted = ps.executeUpdate();

            // Show the success message
            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(this, "Input successful!"     );
                logger.info("Teacher added successfully: " + name);
            }
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "MySQL JDBC driver not found: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid salary format. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        
    }//GEN-LAST:event_AddActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        // TODO add your handling code here:
        
        // Details of database connection
        String url = "jdbc:mysql://localhost/studentmanagement";
        String user = "root";
        String pwd = "root";     

        // SQL query to add one tuple in the table
        String sql = "DELETE "
                   + "FROM Teacher "
                   + "WHERE matricule = ?";
//        String sql1 = "DELETE FROM Teacher WHERE matricule = ?";

        try (
            // Establish the connection to the database
            Connection con = DriverManager.getConnection(url, user, pwd);

            // Create the PreparedStatement
            PreparedStatement ps = con.prepareStatement(sql);
//            PreparedStatement ps1 = con.prepareStatement(sql1)
        ) {
            // Load the MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Take the input values
            String matricule = Matri.getText();
            String name = Nam.getText(); // Assuming 'Nam' is a JTextField for the name
//            String grade = Grad.getText(); // Assuming 'Grad' is a JTextField for the grade
//            double salary = Double.parseDouble(Sala.getText()); // Assuming 'Sala' is a JTextField for the salary

            // Set the parameters in the PreparedStatement
            ps.setString(1, matricule);

            // Execute the query
            int rowsInserted = ps.executeUpdate();
//            ResultSet rs = ps1.executeQuery(sql);

            // Show the success message
            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(this, "Delete successful!"     );
                logger.info("Teacher added successfully: " + matricule);
            }
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "MySQL JDBC driver not found: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid salary format. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_RemoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Teacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Teacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Teacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Teacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Teacher().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JTextField Grad;
    private javax.swing.JTextField Matri;
    private javax.swing.JTextField Nam;
    private javax.swing.JButton Remove;
    private javax.swing.JTextField Sala;
    private javax.swing.JButton Update;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
